/* tslint:disable */
/* eslint-disable */
/**
 * Wardley Mapping Crew API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.8.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MapTextAndWarnings,
    MapTextAndWarningsFromJSON,
    MapTextAndWarningsToJSON,
} from '../models';

export interface GetGithubMapV2GetGithubMapGetRequest {
    githubPath: string;
}

export interface OpenMapV2OpenmapGetRequest {
    url: string;
}

/**
 * 
 */
export class ToolsApi extends runtime.BaseAPI {

    /**
     * API endpoint to get the content of a file in the GitHub repository and return warnings.  :param github_path: Full path of the file to retrieve. :return: Content of the file and warnings.
     * Get Github Map
     */
    async getGithubMapV2GetGithubMapGetRaw(requestParameters: GetGithubMapV2GetGithubMapGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MapTextAndWarnings>> {
        if (requestParameters.githubPath === null || requestParameters.githubPath === undefined) {
            throw new runtime.RequiredError('githubPath','Required parameter requestParameters.githubPath was null or undefined when calling getGithubMapV2GetGithubMapGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.githubPath !== undefined) {
            queryParameters['github_path'] = requestParameters.githubPath;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/get-github-map`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MapTextAndWarningsFromJSON(jsonValue));
    }

    /**
     * API endpoint to get the content of a file in the GitHub repository and return warnings.  :param github_path: Full path of the file to retrieve. :return: Content of the file and warnings.
     * Get Github Map
     */
    async getGithubMapV2GetGithubMapGet(requestParameters: GetGithubMapV2GetGithubMapGetRequest, initOverrides?: RequestInit): Promise<MapTextAndWarnings> {
        const response = await this.getGithubMapV2GetGithubMapGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint to list all relevant files in the GitHub repository.  :return: List of file paths.
     * List Github Maps
     */
    async listGithubMapsV2ListGithubMapsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/list-github-maps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * API endpoint to list all relevant files in the GitHub repository.  :return: List of file paths.
     * List Github Maps
     */
    async listGithubMapsV2ListGithubMapsGet(initOverrides?: RequestInit): Promise<Array<string>> {
        const response = await this.listGithubMapsV2ListGithubMapsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * API endpoint to open a Wardley Map from a GitHub URL.  :param url: The GitHub URL of the Wardley Map. :return: RedirectResponse to the edit URL of the saved map.
     * Open Map
     */
    async openMapV2OpenmapGetRaw(requestParameters: OpenMapV2OpenmapGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling openMapV2OpenmapGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/openmap`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * API endpoint to open a Wardley Map from a GitHub URL.  :param url: The GitHub URL of the Wardley Map. :return: RedirectResponse to the edit URL of the saved map.
     * Open Map
     */
    async openMapV2OpenmapGet(requestParameters: OpenMapV2OpenmapGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.openMapV2OpenmapGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint to provide the privacy statement.  :return: The privacy statement as a string.
     * Privacy Statement
     */
    async privacyStatementV2PrivacyGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/privacy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * API endpoint to provide the privacy statement.  :return: The privacy statement as a string.
     * Privacy Statement
     */
    async privacyStatementV2PrivacyGet(initOverrides?: RequestInit): Promise<string> {
        const response = await this.privacyStatementV2PrivacyGetRaw(initOverrides);
        return await response.value();
    }

}
